<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gostak.io</title>
    <description>Suppose someone to assert: The gostak distims the doshes. You do not know what this means; nor do I. But if we assume that it is English, we know that the doshes are distimmed by the gostak. We know too that one distimmer of doshes is a gostak. If, moreover, the doshes are galloons, we know that some galloons are distimmed by the gostak. And so we may go on, and so we often do go on.
</description>
    <link>http://yourdomain.com/donakis/</link>
    <atom:link href="http://yourdomain.com/donakis/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 29 Nov 2014 09:15:12 +0100</pubDate>
    <lastBuildDate>Sat, 29 Nov 2014 09:15:12 +0100</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Start from scratch: mailserver setup</title>
        <description>&lt;p&gt;I am writting this post in order to document the initial setup that I performed in the production environment where this site is hosted. The purpose that I had in mind when I decided to setup the whole environment from scratch was just learning, as well as seing by first hand what the other side looks like. I have no knowledge at all on system administration, or network security. I did some research in order to find good documentation. In my opinion, as well as those that I have read in different forums the &lt;a href=&quot;https://workaround.org/ispmail&quot;&gt;ISPmail tutorials series&lt;/a&gt; is one of the most reliable and complete collection of documents on mailserver setup, that you can find on the internet —and it also includes some tips and recommendation on mailserver administration and maintenance—. &lt;/p&gt;

&lt;p&gt;It is not difficult to find other tutorials on the internet that adapt the ISPmail guide to other type of environments, as this &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-configure-a-mail-server-using-postfix-dovecot-mysql-and-spamassasin&quot;&gt;tutorial&lt;/a&gt; for DigitalOcean droplets running Ubuntu. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linode.com/&quot;&gt;Linode&lt;/a&gt; has a great collection of guides and tutorials, very well designed and complete. This &lt;a href=&quot;https://www.linode.com/docs/email/email-with-postfix-dovecot-and-mysql&quot;&gt;guide&lt;/a&gt; was very helpfull, but I used it as a supporting guide for the ISPmail one, because it amplifies some concepts and explains a bit more in deep some information in a way that for someone with a lower level of experience like me, results easier to understand. At some point, it’s important to notice that these two guides differ in the steps taken to approach the configuration of the mailserver. In my case I must say that the approach that worked out first was the one recommended in the ISPmail guide, so I did not experiment further with the configuration explained in the Linode guide. &lt;/p&gt;

&lt;p&gt;Anyway, no matter how well you prepare and do your research before you start the type of setup a mailserver requires, there are many chances that you will have to take your time untill all the pieces work togheter.&lt;/p&gt;

&lt;blockquote&gt;&lt;q&gt;
Pataphysics will be, above all, the science of the particular, despite the common opinion that the only science is that of the general. Pataphysics will examine the laws governing exceptions, and will explain the universe supplementary to this one.
&lt;/q&gt;&lt;/blockquote&gt;

&lt;!-- And that has not really much to do with following one or another guide but mostly with those aspects of your environment, as well as the circumstancial coincidence of aspects that can be no problem at all when they exist separately, but when found togheter suddenly turn into a huge hurdle. --&gt;

&lt;p&gt;In the following sections of this document I will just go through the steps as they were performed in my system, mostly as a precautionary measure that will serve as a record, in case of future problems. In addition, I will provide some step by step instructions of some aspects that I found a bit vaguely described.&lt;/p&gt;

</description>
        <pubDate>Fri, 21 Nov 2014 20:21:16 +0100</pubDate>
        <link>http://yourdomain.com/donakis/mailserver</link>
        <guid isPermaLink="true">http://yourdomain.com/donakis/mailserver</guid>
        
        
      </item>
    
      <item>
        <title>Jekyll Plugins and GitHub Pages</title>
        <description>&lt;p&gt;I think Ghost and OpenShift combine to make a good solution for a blogging platform. But since I also wanted to test D3 diagrams I came across &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, which is a more of a do-it-yourself kind of thing. It doesn’t support writting posts online, but that wasn’t something I needed, instead I wanted to be able to load json data from inline javascript inside of posts, work with collections, etc… There was also another inconvenience when using your own domain with an OpenShift application because you are not provided with a static IP, over to which you can point an A record in order for your domain to be resolved to the OpenShift application. Then you are forced to create a CNAME record with the appex www or either use a subdomain. With GitHub Pages there is some way around, even if it is not straight away: you can have a CNAME file at the root of your repository, containing yourdomian.com (without www), and then just create two A records with your domain provider: one with the appex @ which defaults to the root, and the other with www pointing to 192.30.252.153 and 192.30.252.154. The solution is further detailed in &lt;a href=&quot;http://stackoverflow.com/a/9123911&quot;&gt;stackoverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The only problem, when hosting a Jekyll site in GitHub Pages, has to do with the use of Jekyll plugins. But here the solutions are not very clear. In fact there are many different solutions to this problem. I will explain the one that I’ve found most usefull which was found reading &lt;a href=&quot;http://www.aymerick.com/2014/07/22/jekyll-github-pages-bower-bootstrap.html&quot;&gt;Your jekyll site hosted on github pages with bower support&lt;/a&gt;, but before jumping to the solution, maybe understanding the problem will help. Still if you prefer, you can jump straight to the &lt;a href=&quot;#solution&quot;&gt;solution&lt;/a&gt;. &lt;/p&gt;

&lt;h3 id=&quot;some-jekyll-notions&quot;&gt;Some Jekyll notions&lt;/h3&gt;

&lt;p&gt;Jekyll uses &lt;a href=&quot;http://www.yaml.org/&quot;&gt;YAML&lt;/a&gt; to store its data. The YAML front matter is used in Jekyll to declare global variables in the _config.yml file, and locally at the top of each each post or page, in blocks similar to the one below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Blogging Like a Hacker&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That data is retrieved by &lt;a href=&quot;http://liquidmarkup.org/&quot;&gt;Liquid&lt;/a&gt; which is the template engine runned by Jekyll. When you add to the front matter of some content, a ‘layout’ variable and assign to it the value ‘post’, as in the example above, you are telling Liquid to render that file by mapping its content into the corresponding area of the html template that is named post.html, which is stored in the _layouts folder. The files that are inside the _layouts folder are not static html files, and cannot be rendered by a web browser, they contain normal html code as well as Liquid directives that are written following the Liquid markdown syntax that looks like the code below —they can also include a YAML front matter block at the top—.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;head.html&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A line of code like the previous one would be read and interpreted by Liquid as a placeholder for a block of code that has to be retrieved from a file called head.html that is stored in a folder named _includes. Once the block of code has been retrieved from the corresponding source file the include directive would be removed and substituted by a regular html block. So when you run &lt;code&gt;jekyll build&lt;/code&gt; or &lt;code&gt;jekyll serve&lt;/code&gt;, Liquid creates the estatic html files depending on the parameters set in the YAML front matter block. —The difference between running either of the two previous commands is that unlike &lt;code&gt;jekyll build&lt;/code&gt; which builds the static site inside the _site folder, running &lt;code&gt;jekyll serve&lt;/code&gt; will also start a local server on port 4000. That way you can view the actual site by opening your web browser and entering localhost:4000 in the address bar.— &lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;s&gt;Actually the syntax above is wrong, there should not be any space between the &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt; characters but if I used the right syntax it would render the html block of code. So that is something to note as well, because you can also use Liquid directives inside the markdown of a post.&lt;/s&gt;&lt;/b&gt; «— &lt;a href=&quot;http://truongtx.me/2013/01/09/display-liquid-code-in-jekyll/&quot;&gt;Display Liquid code in Jekyll&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So when you install Jekyll and run &lt;code&gt;jekyll new myproject&lt;/code&gt;, you are installing the source files that contain all the YAML variables and Liquid templating default parameters needed to run a Jekyll site. Those files are modular, human readable, and easy to maintain, scale and migrate. But when it comes to viewing your Jekyll site in a web browser you need to generate the static site hyperlinked, but not human readable. The good part is that with Jekyll you don’t need to touch any html or css, because that is generated content. Instead you work in the source folders and each time you add changes, or want to publish a new post you generate the new static code.&lt;/p&gt;

&lt;h3 id=&quot;deploying-jekyll-to-a-webserver&quot;&gt;Deploying Jekyll to a webserver&lt;/h3&gt;

&lt;p&gt;If you wanted to host your Jekyll site in an environment that would allow you to &lt;code&gt;jekyll buil&lt;/code&gt; your site and serve the generated static files from a webserver, you would need a file system running a compatible Ruby installation where you could ssh, edit the source files and then run &lt;code&gt;jekyll build&lt;/code&gt;. Otherwise, you could host the Jekyll source files in your local system, create new posts locally, build the site locally and finally upload them to the webserver. &lt;/p&gt;

&lt;p&gt;In the second case, you’d be tied to a certain computer in order to publish new posts. The first case is a bit resource consuming, and a bit of a rare thing to have to edit your posts with nano or vim. Either way would be quite unsafe, and probably a good advice in any case to track your Jekyll installation with a version management system synchronized with a public repository. &lt;/p&gt;

&lt;h3 id=&quot;jekyll-with-github-pages&quot;&gt;Jekyll with GitHub Pages&lt;/h3&gt;

&lt;p&gt;At this point GitHub Pages comes as a great candidate for a hosting solution. Moreover when you find out that GitHub Pages runs Jekyll and can even &lt;code&gt;jekyll build&lt;/code&gt; your site. Well, to be more precise when GitHub deploys your site to run in the GitHub Pages hosting service that they provide for free, the Jekyll engine is runned in safe mode, as in &lt;code&gt;jekyll build --safe&lt;/code&gt; where the &lt;code&gt;--safe&lt;/code&gt; flag prevents any arbitrary code from being runned at build time. So when using Jekyll plugins, and since the code contained inside the _plugins folder is custom code and not part of the official Jekyll repository, it will not be allowed to run when your site is being built, so it won’t work. &lt;/p&gt;

&lt;p&gt;So far, I think the problem has been laid out. The way around consists in preventing the Jekyll engine at GitHub from building your site, this means that you first build the static files locally and push them over to the gh-pages branch of your repository, excluding from that branch any other Jekyll source files. If GitHub found any of the files that are needed by Jekyll to build your site, and that means files containing Liquid syntax or YAML front matter, it would understand that it needs to run &lt;code&gt;jekyll build --safe&lt;/code&gt; in order for your repository to be served from the GitHub Pages webserver. That way the code living in the _plugins directory will not be runned at build time, so your site will be accesible from the url you’ve been assigned by GitHub Pages, but the plugins will not work. &lt;/p&gt;

&lt;h3 id=&quot;two-ways-to-host-content-on-github-pages&quot;&gt;Two ways to host content on GitHub Pages&lt;/h3&gt;

&lt;p&gt;There are two ways in which you can take advantage of the GitHub Pages service. You can check the reference &lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages/&quot;&gt;here&lt;/a&gt;. One of them allows users or groups to host one website per user/group, in that case the site would be accesible from the url http://username.github.io/
. The other way allows you to host as many websites as repositories you have with GitHub, but those websites would be published and accesed from the url http://username.github.io/nameofrepository/, unless you configure a custom domain. The first case will not work with the solution that will be explained in more detail. This option requires the name of the repository to match the url that GitHub Pages will assign to your user/organization, as in username.github.io. Which means that the files that GitHub will publish to GitHub Pages will be the ones that are tracked by the master branch. This is not the case when dealing with project pages, since you cannot name all the repositories username.github.io. So the way in which GitHub has automated the request to make use of the GitHub Pages service, requires you to add a branch to your repository and identify that branch under the name gh-pages. This second option allows you to track the source files in the master branch, which is a more rational approach and serve to GitHub the generated static files from the gh-pages branch. &lt;/p&gt;

&lt;p&gt;Otherwise, if you are still bound to the first option you can check out &lt;a href=&quot;https://www.npmjs.org/package/jekyll-tools&quot;&gt;jekyll-tools&lt;/a&gt; which can be installed as a Node.js module. This tool allows you to build your site normally inside the master branch, then initialize a second one from the master one &lt;code&gt;$ git branch src&lt;/code&gt;, move to the second one, &lt;code&gt;$ git checkout src&lt;/code&gt; and run &lt;code&gt;$ jek deploy&lt;/code&gt; which leaves the master branch free from any files containing Jekyll code. I haven’t tested this approach enough so I cannot cover in much detail how to proceed in order to integrate it inside a git workflow.
&lt;a name=&quot;solution&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-way-ive-managed-to-setup&quot;&gt;The way I’ve managed to setup.&lt;/h3&gt;

&lt;p&gt;The option that I’ve been able to implement is the second one, that allowes me to host a website per repository. I’ve complicated things a bit further in order to be able to generate two estatic sites. One to be hosted in GitHub pages that would serve as a testing/staging environment allowing me to experiment with the implementation of new features, and a second static site configured to live in another host. &lt;s&gt;That way, I can ssh into my vps and clone the third branch with: &lt;code&gt;$ git clone -b third-branch-name https://github.com/username/myrepository.git html&lt;/code&gt;.&lt;/s&gt;&lt;/p&gt;

&lt;p&gt;There is a better solution for managing the deployment into a third production environment, without having to run clones an pulls from that environment. Click here&lt;/p&gt;

&lt;h4 id=&quot;requirements&quot;&gt;Requirements:&lt;/h4&gt;
&lt;p&gt;The following steps work from a newly created Jekyll installation, or from a Jekyll installation that doesn’t yet have an initialized local git repository. If you haven’t yet runned &lt;code&gt;git init&lt;/code&gt; from the root of your repository, you can just delete the _site folder and follow along. If otherwise you are already tracking with git your Jekyll site, I’m not much of a git expert, but in my world of unexpected calamities, I think that instead of deleting the whole .git directory tree, a better solution could be to create a new Jekyll installation. Once you have set up the new project with its own local git index, and synchronized it to a GitHub repository with the following configuration of branches, you can move the source files from the original Jekyll project over to the new one and regenerate your site. &lt;/p&gt;

&lt;p&gt;I understand that you have already installed the jekyll ruby gem, if so open a terminal window, cd to the directory where you usually store your local projects and initialize a new jekyll site with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysitename&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To complete the next section you need a fresh new empty GitHub repository. You can create one following the steps indicated &lt;a href=&quot;https://help.github.com/articles/creating-a-new-repository/&quot;&gt;here&lt;/a&gt; up to the sixth point, remember not to add yet a .gitignore file, as suggested in the fifth step. Once you have completed the previous steps you’ll be provided with a ssh or https link that you will need in order to add to your local repository the newly created public one at GitHub as its remote origin. Copy the https or ssh link to your clipboard and back at the terminal go over the next section. It is important that you go over the following steps before running &lt;code&gt;jekyll build&lt;/code&gt; or &lt;code&gt;jekyll serve&lt;/code&gt; at all, so I understand that there is no _site folder yet living inside your local files.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jekyll source files&amp;quot;&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remote&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git@github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repositoryname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following section initializes a new orphan branch, which is a branch that doesn’t share the history with the master branch, then removes from the new branch the entire git directory tree. Since the branch is left tracking no content at all, —you still haven’t &lt;code&gt;jekyll build&lt;/code&gt; the static files— the second part goes over the creation of an index.html file that will work as a placeholder that you can add to your staging area, then commit and finally push. Note here, that instead of pushing it to the master branch, you push to a gh-pages branch.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orphan&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gh-pages&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gitignore&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Coming soon&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;init gh-pages&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gh-pages&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I repeated this block after going back to the master branch. But this time I initialized a branch called prod-pages, because in my case I wanted to be able to generate two different static sites.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orphan&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prod-pages&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gitignore&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Coming soon&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;init prod-pages&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prod-pages&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since those branches are now live at your GitHub public repository, you can go back to the master branch and map each of them to a folder, just by running a git clone directive with the -b branch-name and the indication of the folder where the clone will copy the files. I mapped the gh-pages clone to crete a _site folder, which is the default folder where Jekyll would build your static files as long as you don’t indicate a different destination for your site when running the build command. And the second clone mapped the prod-pages branch to a folder named _site-prod.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gh-pages&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git@github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repositoryname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_site&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prod-pages&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git@github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repositoryname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_site-prod&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can open your .gitignore file. It should already include the _site folder, add a new line that excludes also the _site-prod folder. After adding the folder to the .gitignore directives, you can finally build your site, but for the static files that you want to access from the url that GitHub provides for project pages, you should add in the _config.yml file inside the baseurl variable, the subdirectory part of url where your project will be accesible once uploaded to GitHub Pages. So it shoul look like this &lt;code&gt;baseurl: &quot;/repositorname&quot;&lt;/code&gt;. Now you can finally build the static files, and push them to the live GitHub repository.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_site&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;generated static files&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go back to the root.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Open again the _config.yml, remove the subdirectory name previously added to the baseurl, safe the file and repeat the previous steps as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_site-prod&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_site-prod&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;generated static site-prod&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point you can view your site from the browser at the corresponding url. &lt;/p&gt;

&lt;h3 id=&quot;the-workflow&quot;&gt;The Workflow&lt;/h3&gt;

&lt;p&gt;From this point it is very easy to engage with some kind of structured workflow. Maybe taking a look at the distribution of branches can help. If you enter &lt;code&gt;git branch&lt;/code&gt; git will output the current branch you’re at. Whenever you move to the root folder you’ll be working in the master branch, and if you cd to the _site folder you’ll be working in the gh-pages branch, in the same way cd’ing to the _site-prod would return the prod-pages branch. So instead of jumping from branch to branch you can just move to the corresponding directory to add, commit, and push to the remote site. &lt;/p&gt;

&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;

&lt;p&gt;Ssh to your vps I suppose the git-core is installed. In a Debian system &lt;code&gt;# apt-get install git-core&lt;/code&gt; would install the corresponding packages. The important thing now is to choose the directory for the  git repository. I’ve created in it inside the /var  as /var/repo/site.git .&lt;/p&gt;

&lt;p&gt;Once you run &lt;code&gt;git init --bare&lt;/code&gt; you can &lt;code&gt;ls&lt;/code&gt; to see contents and &lt;code&gt;cd&lt;/code&gt; into the hooks folder which stores samples that are not yet active of diferent git customizable she-bang scripts that you can get git to launch before of after the execution of git tasks. These tasks are launched by git in response to the commands you run from another environment. Once the two systems have established the appropriate connections.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bare&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hooks&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a new file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;nano&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post-receive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enter (matching /var/www/html with your apache virtual host or DocumentRoot of your live site):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;work-tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;git-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At your local system run &lt;code&gt;jekyll build --destination _site-prod&lt;/code&gt;, cd to _site-prod. If you want to check just in case, but running git branch at this point shoul return prod-pages. Next you can add a new remote but instead of origin refer it as live.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remote&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;live&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//usernamet@vpIPordomain/path/to/repo.git&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you want to git add . whichever new additions that branch is holding, git commit -m ‘a message’
and the push directive is important to understand it. Because the remote live is now tracking your prod-pages branch as its master branch. So every time you want to update the changes to the production server you must push new commits to the master branch of the server’s git repository. That way the bash script will be launched and the files loades to the apache virtual server.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;live&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prod-pages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 13 Nov 2014 20:21:16 +0100</pubDate>
        <link>http://yourdomain.com/donakis/2014/11/13/jekyll-plugins-and-gh-pages.html</link>
        <guid isPermaLink="true">http://yourdomain.com/donakis/2014/11/13/jekyll-plugins-and-gh-pages.html</guid>
        
        
      </item>
    
      <item>
        <title>Installing Ghost on OpenShift</title>
        <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;This post is being written with the intention of keeping a personal record of the actions performed in my particular environment, meeting a set of conditions which I’m not sure I’ll be able to point out in every case. Including ruby, git and node.js version; operating system and so on. OpenShift provides plenty of documentation regarding these options which I will try to refer, and which I strongly recommend to consult before trying to perform any modification in any other particular environment.&lt;/em&gt; &lt;/p&gt;

&lt;h2 id=&quot;installation-and-configuration-of-the-client-tools&quot;&gt;Installation and configuration of the Client Tools&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.openshift.com/en/getting-started-client-tools.html&quot;&gt;Installing the Client Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-US/OpenShift_Online/2.0/html/Client_Tools_Installation_Guide/index.html&quot;&gt;Extended documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have verified that Ruby and Git are available in our system we can install the OpenShift gem.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rhc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the installation has completed, run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rhc&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-US/OpenShift_Online/2.0/html/Client_Tools_Installation_Guide/Configuring_Client_Tools.html&quot;&gt;Configuration of the Client Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll be prompted to enter our login information. First we have to enter the email account that we have previously used to sign in to the OpenShift platform.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;openshift.redhat.com:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And next our password:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;openshift.redhat.com: &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email@account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:******&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For details on this process please refer to the link above. In a summarized way I think I was asked if I wanted to generate a token, which I accepted by typing yes and pressing enter. Then the wizard outputs the path in you local system where the configuration file that contains your credentials, has been created. Then when your SSH keys have been created, you are prompted with this question which I accepted.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploaded&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OpenShift&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Upload&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;yes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;yes&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And by the end of this process you are able to choose a domain.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Please&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;|:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyDomain&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;MyDomain&amp;#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;successfully&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-the-ghost-application&quot;&gt;Creating the Ghost application&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://howtoinstallghost.com/how-to-install-ghost-on-openshift/&quot;&gt;How to install Ghost on OpenShift&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.openshift.com/quickstarts/ghost&quot;&gt;Quickstart reference&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/openshift-quickstart/openshift-ghost-quickstart&quot;&gt;Github repository of OpenShift’s Ghost code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To setup Ghost as an application on your OpenShift’s account cd to the folder holding your other local projects. In my case &lt;code&gt;$ cd ~/Sites&lt;/code&gt; and type:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;Where ghost will be the domain that will be followed by the domain chosen when configuring the client tools, both adding to something like ghost-mydomain.rhcloud.com which is the url where you will be able to access your Ghost application. As well as the name of the folder that will be created in your local system holding a cloned repository of the public site. You can change it to anything you prefer.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rhc&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ghost&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodejs-0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from-code&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//github.com/openshift-quickstart/openshift-ghost-quickstart.git&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;running-the-application-locally&quot;&gt;Running the Application Locally&lt;/h3&gt;

&lt;p&gt;As explained in the README.md file of the Github repository linked above. The Ghost repository cloned to &lt;code&gt;~/Sites/ghost&lt;/code&gt; is missing two folders. If we open the .gitignore file from the root folder, we see they should be inside the content folder, so we can add them to our local installation since we aren’t facing the risk of overwritting any of them when pushing changes from local to the live site. So inside the content folder I added an images folder and a data folder. Then I removed the node_modules folder and added it to the beginning of the .gitignore file.&lt;/p&gt;

&lt;p&gt;If you log in to your OpenShift account and go to applications. You must see that you have one application called ghost. If you click on the name ghost. You enter to another very similar screen. In the right sidebar highlighted with red in the image next. If we click the link “Want to log in to your application?”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/donakis/images/ssh-1.png&quot; alt=&quot;Screen Capture&quot; title=&quot;Screen Capture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can select and paste the credentials we need to connect to our hosting with ssh they should be something like &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;666ddddsgytsyvus&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;@ghost-mydomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rhcloud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to check the version of Node.js that our server is running we can enter&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;666ddddsgytsyvus&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;@ghost-mydomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rhcloud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That should output the node.js version. In my case the node.js version was 0.10.25. My local environment node.js version was verified by typing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since I had to downgrade a version because I was running locally node v0.10.26 .I followed the next tutorial on how to install n which is an npm module for managing node.js versions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;I do not fancy much this step. I can’t say yet if this can get me into further problems regarding my other local projects&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://theholmesoffice.com/node-js-fundamentals-how-to-upgrade-the-node-js-version/&quot;&gt;Node Version Management&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I verified that my local node.js version was as well 0.10.25. I deleted my node_modules folder and typed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;production&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point I could at last run the Ghost app locally without any errors showing up:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I runned:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cached&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the node_modules folder displayed as deleted from the git directory tree.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;added my custom theme&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;To make sure that pushing the local repository to the public site didn’t break any of the installations I pushed a folder containing a custom theme.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I logged into my live site and was able to select the custom theme from the settings pannel without breaking anything. So the code was uploaded correctly.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Sep 2014 04:26:00 +0200</pubDate>
        <link>http://yourdomain.com/donakis/2014/09/29/Installing-Ghost-on-OpenShift.html</link>
        <guid isPermaLink="true">http://yourdomain.com/donakis/2014/09/29/Installing-Ghost-on-OpenShift.html</guid>
        
        
      </item>
    
      <item>
        <title>Bourbon, Neat and Bitters installation</title>
        <description>&lt;p&gt;This site runs with &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. I modified the base Jekyll theme in order to have some control over the behaviour of the site’s layout throughout the widest possible range of screen sizes. The &lt;a href=&quot;http://neat.bourbon.io/&quot;&gt;Neat&lt;/a&gt; library framework developed at &lt;a href=&quot;http://thoughtbot.com/&quot;&gt;Thoughtbot&lt;/a&gt; on top of &lt;a href=&quot;http://bourbon.io/&quot;&gt;Bourbon&lt;/a&gt;, is a great option that allows you to create truly semantic grid systems. By adding &lt;a href=&quot;http://bitters.bourbon.io/&quot;&gt;Bitters&lt;/a&gt; you can setup a uniform baseline grid, and control the distribution of elements on the y-axis. This way the vertical rythm of the layout would allow you to regulate the eventual disarrangements that might take place in the vertical axis derived from the redistribution of elements, depending on the screen sizes of the devices that request them. For example, when the device allowes to redistribute in different columns additional content, the baseline adjustment will help matching the outest top and bottom edges of the containers side by side with the inner pattern of falling line heights inside the primary container. &lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://bourbon.io/&quot;&gt;Bourbon&lt;/a&gt; library is built for &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;. It can be installed to work with &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; as well, but maybe you need to update your Compass version to 1.0.0 or newer. Previous releases of Compass do not support Sass 3.3 which is needed if you want to install the current version of the Bourbon gem. With that in mind, you might want to check which version is installed in your machine, before installing or updating any ruby gem. Just type &lt;code&gt;$ compass version&lt;/code&gt; from the command line and the output should contain which version of the Compass gem you are running.  &lt;/p&gt;

&lt;h3 id=&quot;not-found&quot;&gt;Not found&lt;/h3&gt;

&lt;p&gt;If the command returned a not found argument, you don’t need to install Compass at all to work with Bourbon. I’m not going to do it myself in this case, so apart from the configuration and installation of the compatible Ruby gems, I won’t cover any other aspect of the Compass workflow. And I must admit also that I do not see many reasons to combine these two frameworks. One of the greatest advantages I’ve found when working with Bourbon over Compass is the unobtrusive control and freedom that the framework provides you over any type of layout. It doesn’t tie you to floating positioned layouts, or any other kind of inmutable approach for building your site. However and apart from the fact that I find myself most confortable when using a set of tools instead of another, I am aware that Compass is, and has been for some time, the framework most widely used to deploy Sass preprocessed stylesheets. This gives me a slight idea of the volume of projects that might depend on older versions of Sass, so I think that it’s always a good thing to document the easy steps that can avoid you from having to troubleshoot errors.  Most of the time is a simple thing: you launch a new project, reconfigure your environment, go back to an older project and find something went wrong, check the syntax, downgrade packages, etc… But this can become a little time-consuming. &lt;/p&gt;

&lt;h3 id=&quot;compass-100&quot;&gt;Compass 1.0.0&lt;/h3&gt;
&lt;p&gt;Another possibility is that &lt;code&gt;$ compass version&lt;/code&gt; returned 1.0.0 or newer. In that case you are safe to go and install the Bourbon gem with &lt;code&gt;$ gem install bourbon&lt;/code&gt;. &lt;/p&gt;

&lt;h3 id=&quot;older-compass-needed-for-this-project&quot;&gt;Older Compass (needed for this project)&lt;/h3&gt;

&lt;p&gt;If you need to run Bourbon with an older version of Compass or Sass you need to install bourbon 3.2.x. So instead of just typing &lt;code&gt;$ gem install bourbon&lt;/code&gt; which defaults to the latest stable release you can specify a version as in &lt;code&gt;$ gem install bourbon -v 3.2.3&lt;/code&gt; . In the case of Neat the release that is compatible with Sass 3.2 is neat 1.5.1 so running &lt;code&gt;$ gem install neat -v 1.5.1&lt;/code&gt; will do. Bitters can be installed normally with &lt;code&gt;$ gem install bitters&lt;/code&gt; since the gem is compatible with versions of Sass starting from Sass 3.0.0.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/bourbon#requirements&quot;&gt;Bourbon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/neat#requirements&quot;&gt;Neat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/bitters#requirements&quot;&gt;Bitters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;older-compass-needed-for-different-projects&quot;&gt;Older Compass (needed for different projects)&lt;/h3&gt;

&lt;p&gt;If the previous command returned Compass 0.12.6 or similar, but you are starting with a new project that does not require an old version of Compass, chances are that you might still need to run an old Compass projects that depends on Compass 0.12.6 and Sass 3.2. If this is the case but you still update your installation, you won’t notice any incompatibility issue untill you run an old Compass project on Sass 3.3, which will prompt you with constant deprecation warnings and syntax errors.&lt;/p&gt;

&lt;p&gt;When collaborating on projects that require a group of people to work on the same files and track them with some kind of version control system this is a common problem. &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt; is a tool that helps solving ruby dependencies. It can be installed as a Ruby gem with &lt;code&gt;$ gem install bundler&lt;/code&gt; and works in a similar way as other package management systems. If you want to specify a set of gems for a specific project, open a terminal session and cd to the root of your project, then just enter &lt;code&gt;$ bundle init&lt;/code&gt; and you will find a newly created Gemfile, that you can open with read/write permissions &lt;code&gt;$ sudo vi Gemfile&lt;/code&gt;. Add there the required dependencies, following the syntax below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-livescript&quot; data-lang=&quot;livescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;~&amp;gt;1.0.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;bourbon&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;neat&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;bitters&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This file works in Ruby in a similar way the packaje.json works inside a Node.js project. As in a Node.js project running &lt;code&gt;$ npm install&lt;/code&gt; would launch npm, –node package manager– to start the installation of the dependencies especified in the package.json; with Bundler you’d have to run &lt;code&gt;$ bundle install&lt;/code&gt;. This will launch the installer and solve any conflicts when matching your global Ruby installation to your local especification. Once the installation has completed you’ll find a new file Gemfile.lock that contains a complete reference to the installation performed by Bundler. Add it to the staging area of your repository, so it is tracked next time you commit your changes. &lt;code&gt;$ git add Gemfile.lock&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The last thing to comment in relation to Compass is that when installed with Bundler, to be sure that you are running the correct Compass version, you should run &lt;code&gt;$ bundle exec compass watch&lt;/code&gt; instead of &lt;code&gt;$ compass watch&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To start using the Bourbon stack of tools run &lt;code&gt;$ bundle exec bourbon install --path=path/to/sass&lt;/code&gt; ,  &lt;code&gt;$ bundle exec neat install --path=path/to/sass&lt;/code&gt; and  &lt;code&gt;$ bundle exec bitters install --path=path/to/sass&lt;/code&gt;. Each of these three commands will create a folder containing the source files. It is important that you don’t make any modifications to these files. They contain the default parameters used by each of these tools, but since the variables are declared with the following sass syntax:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$variable-option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;!default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The !default termination means that if the variable has no value assigned, it should default to the one especified here. So keeping these three folders untouched will keep you from having to commit them to a repository. Since Bundler has created a Gemfile.lock with the specific versions your project is running, anyone wanting to work on the same project would only have to clone the repository, run &lt;code&gt;$ bundle install&lt;/code&gt; and the three bundle exec commands mentioned above. &lt;/p&gt;
</description>
        <pubDate>Fri, 12 Sep 2014 21:17:00 +0200</pubDate>
        <link>http://yourdomain.com/donakis/2014/09/12/bourbon-neat-and-bitters-installation.html</link>
        <guid isPermaLink="true">http://yourdomain.com/donakis/2014/09/12/bourbon-neat-and-bitters-installation.html</guid>
        
        
      </item>
    
  </channel>
</rss>
